var express = require('express');
var path = require('path');
var config = require('./app/config');
var mongoose = require('./app/mongoose');
var bodyParser = require('body-parser');
var cookieParser = require('cookie-parser');
var session = require('express-session');
var favicon = require('serve-favicon');
var HttpError = require('./app/error').HttpError;
var AuthError = require('./app/error').AuthError;
var ObjectID = require('mongodb').ObjectID;
var port = process.env.PORT || config.get('port');
var app = express();
var async = require('async');
var pdf = require('pdfcrowd');
// create an API client instance
var client = new pdf.Pdfcrowd("yuliya", "cb73bc7414df02a0ca88aea32f159971");
app.use('/app', express.static(path.resolve(__dirname, 'app')));
app.use('/libs', express.static(path.resolve(__dirname, 'libs')));
var renderIndex = function (req, res) {
    res.sendFile(path.resolve(__dirname, 'index.html'));
};
var fileUpload = require('express-fileupload');
// default options 
app.use(fileUpload());
app.post('/upload', function (req, res) {
    var sampleFile;
    if (!req.files) {
        res.send('No files were uploaded.');
        return;
    }
    sampleFile = req.files.sampleFile;
    sampleFile.mv('filename.jpg', function (err) {
        if (err) {
            res.status(500).send(err);
        }
        else {
            res.send('File uploaded!');
        }
    });
});
var body = {};
app.get('/', function (req, res, next) {
    res.sendFile(path.resolve(__dirname, 'index.html'));
});
app.get('/pdf', function (req, res, next) {
    console.log(body);
    client.convertHtml('<html>' + body.hhtml + '</html>', pdf.sendHttpResponse(res));
});
app.post('/pdf', function (req, res, next) {
    body = req.body;
    client.convertHtml('<html>hi im im</html>', pdf.sendHttpResponse(res));
});
var server = app.listen(port, function () {
    var host = server.address().address;
    var port = server.address().port;
    console.log('This express app is listening on port:' + port);
});

//# sourceMappingURL=data:application/json;base64,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Q0FBd0MsR0FBRyxJQUFJLENBQUMsQ0FBQztBQUNqRSxDQUFDLENBQUMsQ0FBQyIsImZpbGUiOiJzZXJ2ZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZXhwcmVzcyA9IHJlcXVpcmUoJ2V4cHJlc3MnKTtcclxudmFyIHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XHJcbnZhciBjb25maWcgPSByZXF1aXJlKCcuL2FwcC9jb25maWcnKTtcclxudmFyIG1vbmdvb3NlID0gcmVxdWlyZSgnLi9hcHAvbW9uZ29vc2UnKTtcclxudmFyIGJvZHlQYXJzZXIgPSByZXF1aXJlKCdib2R5LXBhcnNlcicpO1xyXG52YXIgY29va2llUGFyc2VyID0gcmVxdWlyZSgnY29va2llLXBhcnNlcicpO1xyXG52YXIgc2Vzc2lvbiA9IHJlcXVpcmUoJ2V4cHJlc3Mtc2Vzc2lvbicpO1xyXG52YXIgZmF2aWNvbiA9IHJlcXVpcmUoJ3NlcnZlLWZhdmljb24nKTtcclxudmFyIEh0dHBFcnJvciA9IHJlcXVpcmUoJy4vYXBwL2Vycm9yJykuSHR0cEVycm9yO1xyXG52YXIgQXV0aEVycm9yID0gcmVxdWlyZSgnLi9hcHAvZXJyb3InKS5BdXRoRXJyb3I7XHJcbnZhciBPYmplY3RJRCA9IHJlcXVpcmUoJ21vbmdvZGInKS5PYmplY3RJRDtcclxudmFyIHBvcnQ6IG51bWJlciA9IHByb2Nlc3MuZW52LlBPUlQgfHwgY29uZmlnLmdldCgncG9ydCcpO1xyXG52YXIgYXBwID0gZXhwcmVzcygpO1xyXG52YXIgYXN5bmMgPSByZXF1aXJlKCdhc3luYycpO1xyXG5cclxudmFyIHBkZiA9IHJlcXVpcmUoJ3BkZmNyb3dkJyk7XHJcblxyXG4vLyBjcmVhdGUgYW4gQVBJIGNsaWVudCBpbnN0YW5jZVxyXG52YXIgY2xpZW50ID0gbmV3IHBkZi5QZGZjcm93ZChcInl1bGl5YVwiLCBcImNiNzNiYzc0MTRkZjAyYTBjYTg4YWVhMzJmMTU5OTcxXCIpO1xyXG5cclxuYXBwLnVzZSgnL2FwcCcsIGV4cHJlc3Muc3RhdGljKHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsICdhcHAnKSkpO1xyXG5hcHAudXNlKCcvbGlicycsIGV4cHJlc3Muc3RhdGljKHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsICdsaWJzJykpKTtcclxuXHJcblxyXG5cclxudmFyIHJlbmRlckluZGV4ID0gKHJlcTogZXhwcmVzcy5SZXF1ZXN0LCByZXM6IGV4cHJlc3MuUmVzcG9uc2UpID0+IHtcclxuICAgIHJlcy5zZW5kRmlsZShwYXRoLnJlc29sdmUoX19kaXJuYW1lLCAnaW5kZXguaHRtbCcpKTtcclxufVxyXG5cclxuXHJcblxyXG5cclxuXHJcbnZhciBmaWxlVXBsb2FkID0gcmVxdWlyZSgnZXhwcmVzcy1maWxldXBsb2FkJyk7XHJcbiBcclxuLy8gZGVmYXVsdCBvcHRpb25zIFxyXG5hcHAudXNlKGZpbGVVcGxvYWQoKSk7XHJcbiBcclxuYXBwLnBvc3QoJy91cGxvYWQnLCBmdW5jdGlvbihyZXEsIHJlcykge1xyXG4gICAgdmFyIHNhbXBsZUZpbGU7XHJcbiBcclxuICAgIGlmICghcmVxLmZpbGVzKSB7XHJcbiAgICAgICAgcmVzLnNlbmQoJ05vIGZpbGVzIHdlcmUgdXBsb2FkZWQuJyk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gXHJcbiAgICBzYW1wbGVGaWxlID0gcmVxLmZpbGVzLnNhbXBsZUZpbGU7XHJcbiAgICBzYW1wbGVGaWxlLm12KCdmaWxlbmFtZS5qcGcnLCBmdW5jdGlvbihlcnIpIHtcclxuICAgICAgICBpZiAoZXJyKSB7XHJcbiAgICAgICAgICAgIHJlcy5zdGF0dXMoNTAwKS5zZW5kKGVycik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXMuc2VuZCgnRmlsZSB1cGxvYWRlZCEnKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxufSk7XHJcblxyXG5cclxuXHJcblxyXG52YXIgYm9keT17fTtcclxuYXBwLmdldCgnLycsZnVuY3Rpb24ocmVxLCByZXMsIG5leHQpIHtcclxuICAgIHJlcy5zZW5kRmlsZShwYXRoLnJlc29sdmUoX19kaXJuYW1lLCAnaW5kZXguaHRtbCcpKTtcclxufSk7XHJcbmFwcC5nZXQoJy9wZGYnLCBmdW5jdGlvbiAocmVxLCByZXMsIG5leHQpIHtcclxuICAgIGNvbnNvbGUubG9nKGJvZHkpO1xyXG4gICBjbGllbnQuY29udmVydEh0bWwoJzxodG1sPicrYm9keS5oaHRtbCsnPC9odG1sPicsIHBkZi5zZW5kSHR0cFJlc3BvbnNlKHJlcykpOyBcclxufSk7XHJcbmFwcC5wb3N0KCcvcGRmJywgZnVuY3Rpb24gKHJlcSwgcmVzLCBuZXh0KSB7XHJcbiAgICBib2R5PXJlcS5ib2R5O1xyXG4gICBjbGllbnQuY29udmVydEh0bWwoJzxodG1sPmhpIGltIGltPC9odG1sPicsIHBkZi5zZW5kSHR0cFJlc3BvbnNlKHJlcykpOyBcclxufSk7XHJcblxyXG52YXIgc2VydmVyID0gYXBwLmxpc3Rlbihwb3J0LCBmdW5jdGlvbigpIHtcclxuICAgIHZhciBob3N0ID0gc2VydmVyLmFkZHJlc3MoKS5hZGRyZXNzO1xyXG4gICAgdmFyIHBvcnQgPSBzZXJ2ZXIuYWRkcmVzcygpLnBvcnQ7XHJcbiAgICBjb25zb2xlLmxvZygnVGhpcyBleHByZXNzIGFwcCBpcyBsaXN0ZW5pbmcgb24gcG9ydDonICsgcG9ydCk7XHJcbn0pO1xyXG5cclxuXHJcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
