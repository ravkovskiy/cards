var express = require('express');
var path = require('path');
var config = require('./app/config');
var bodyParser = require('body-parser');
var cookieParser = require('cookie-parser');
var session = require('express-session');
var favicon = require('serve-favicon');
var HttpError = require('./app/error').HttpError;
var AuthError = require('./app/error').AuthError;
var port = process.env.PORT || config.get('port');
var app = express();
var async = require('async');
var pdf = require('pdfcrowd');
// create an API client instance
var client = new pdf.Pdfcrowd("yuliya", "cb73bc7414df02a0ca88aea32f159971");
app.use('/app', express.static(path.resolve(__dirname, 'app')));
app.use('/libs', express.static(path.resolve(__dirname, 'libs')));
var renderIndex = function (req, res) {
    res.sendFile(path.resolve(__dirname, 'index.html'));
};
var fileUpload = require('express-fileupload');
// default options 
app.use(fileUpload());
app.post('/upload', function (req, res) {
    var sampleFile;
    if (!req.files) {
        res.send('No files were uploaded.');
        return;
    }
    sampleFile = req.files.sampleFile;
    sampleFile.mv('filename.jpg', function (err) {
        if (err) {
            res.status(500).send(err);
        }
        else {
            res.send('File uploaded!');
        }
    });
});
var body = {};
app.get('/', function (req, res, next) {
    res.sendFile(path.resolve(__dirname, 'index.html'));
});
app.get('/pdf', function (req, res, next) {
    console.log(body);
    client.convertHtml('<html>' + body.hhtml + '</html>', pdf.sendHttpResponse(res));
});
app.post('/pdf', function (req, res, next) {
    body = req.body;
    client.convertHtml('<html>hi im im</html>', pdf.sendHttpResponse(res));
});
var server = app.listen(port, function () {
    var host = server.address().address;
    var port = server.address().port;
    console.log('This express app is listening on port:' + port);
});

//# sourceMappingURL=data:application/json;base64,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aXJlKCdleHByZXNzJyk7XHJcbnZhciBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xyXG52YXIgY29uZmlnID0gcmVxdWlyZSgnLi9hcHAvY29uZmlnJyk7XHJcbnZhciBib2R5UGFyc2VyID0gcmVxdWlyZSgnYm9keS1wYXJzZXInKTtcclxudmFyIGNvb2tpZVBhcnNlciA9IHJlcXVpcmUoJ2Nvb2tpZS1wYXJzZXInKTtcclxudmFyIHNlc3Npb24gPSByZXF1aXJlKCdleHByZXNzLXNlc3Npb24nKTtcclxudmFyIGZhdmljb24gPSByZXF1aXJlKCdzZXJ2ZS1mYXZpY29uJyk7XHJcbnZhciBIdHRwRXJyb3IgPSByZXF1aXJlKCcuL2FwcC9lcnJvcicpLkh0dHBFcnJvcjtcclxudmFyIEF1dGhFcnJvciA9IHJlcXVpcmUoJy4vYXBwL2Vycm9yJykuQXV0aEVycm9yO1xyXG52YXIgcG9ydDogbnVtYmVyID0gcHJvY2Vzcy5lbnYuUE9SVCB8fCBjb25maWcuZ2V0KCdwb3J0Jyk7XHJcbnZhciBhcHAgPSBleHByZXNzKCk7XHJcbnZhciBhc3luYyA9IHJlcXVpcmUoJ2FzeW5jJyk7XHJcbnZhciBwZGYgPSByZXF1aXJlKCdwZGZjcm93ZCcpO1xyXG5cclxuLy8gY3JlYXRlIGFuIEFQSSBjbGllbnQgaW5zdGFuY2VcclxudmFyIGNsaWVudCA9IG5ldyBwZGYuUGRmY3Jvd2QoXCJ5dWxpeWFcIiwgXCJjYjczYmM3NDE0ZGYwMmEwY2E4OGFlYTMyZjE1OTk3MVwiKTtcclxuXHJcbmFwcC51c2UoJy9hcHAnLCBleHByZXNzLnN0YXRpYyhwYXRoLnJlc29sdmUoX19kaXJuYW1lLCAnYXBwJykpKTtcclxuYXBwLnVzZSgnL2xpYnMnLCBleHByZXNzLnN0YXRpYyhwYXRoLnJlc29sdmUoX19kaXJuYW1lLCAnbGlicycpKSk7XHJcblxyXG5cclxuXHJcbnZhciByZW5kZXJJbmRleCA9IChyZXE6IGV4cHJlc3MuUmVxdWVzdCwgcmVzOiBleHByZXNzLlJlc3BvbnNlKSA9PiB7XHJcbiAgICByZXMuc2VuZEZpbGUocGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgJ2luZGV4Lmh0bWwnKSk7XHJcbn1cclxuXHJcblxyXG5cclxuXHJcblxyXG52YXIgZmlsZVVwbG9hZCA9IHJlcXVpcmUoJ2V4cHJlc3MtZmlsZXVwbG9hZCcpO1xyXG4gXHJcbi8vIGRlZmF1bHQgb3B0aW9ucyBcclxuYXBwLnVzZShmaWxlVXBsb2FkKCkpO1xyXG4gXHJcbmFwcC5wb3N0KCcvdXBsb2FkJywgZnVuY3Rpb24ocmVxLCByZXMpIHtcclxuICAgIHZhciBzYW1wbGVGaWxlO1xyXG4gXHJcbiAgICBpZiAoIXJlcS5maWxlcykge1xyXG4gICAgICAgIHJlcy5zZW5kKCdObyBmaWxlcyB3ZXJlIHVwbG9hZGVkLicpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuIFxyXG4gICAgc2FtcGxlRmlsZSA9IHJlcS5maWxlcy5zYW1wbGVGaWxlO1xyXG4gICAgc2FtcGxlRmlsZS5tdignZmlsZW5hbWUuanBnJywgZnVuY3Rpb24oZXJyKSB7XHJcbiAgICAgICAgaWYgKGVycikge1xyXG4gICAgICAgICAgICByZXMuc3RhdHVzKDUwMCkuc2VuZChlcnIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmVzLnNlbmQoJ0ZpbGUgdXBsb2FkZWQhJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbn0pO1xyXG5cclxuXHJcblxyXG5cclxudmFyIGJvZHk9e307XHJcbmFwcC5nZXQoJy8nLGZ1bmN0aW9uKHJlcSwgcmVzLCBuZXh0KSB7XHJcbiAgICByZXMuc2VuZEZpbGUocGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgJ2luZGV4Lmh0bWwnKSk7XHJcbn0pO1xyXG5hcHAuZ2V0KCcvcGRmJywgZnVuY3Rpb24gKHJlcSwgcmVzLCBuZXh0KSB7XHJcbiAgICBjb25zb2xlLmxvZyhib2R5KTtcclxuICAgY2xpZW50LmNvbnZlcnRIdG1sKCc8aHRtbD4nK2JvZHkuaGh0bWwrJzwvaHRtbD4nLCBwZGYuc2VuZEh0dHBSZXNwb25zZShyZXMpKTsgXHJcbn0pO1xyXG5hcHAucG9zdCgnL3BkZicsIGZ1bmN0aW9uIChyZXEsIHJlcywgbmV4dCkge1xyXG4gICAgYm9keT1yZXEuYm9keTtcclxuICAgY2xpZW50LmNvbnZlcnRIdG1sKCc8aHRtbD5oaSBpbSBpbTwvaHRtbD4nLCBwZGYuc2VuZEh0dHBSZXNwb25zZShyZXMpKTsgXHJcbn0pO1xyXG5cclxudmFyIHNlcnZlciA9IGFwcC5saXN0ZW4ocG9ydCwgZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgaG9zdCA9IHNlcnZlci5hZGRyZXNzKCkuYWRkcmVzcztcclxuICAgIHZhciBwb3J0ID0gc2VydmVyLmFkZHJlc3MoKS5wb3J0O1xyXG4gICAgY29uc29sZS5sb2coJ1RoaXMgZXhwcmVzcyBhcHAgaXMgbGlzdGVuaW5nIG9uIHBvcnQ6JyArIHBvcnQpO1xyXG59KTtcclxuXHJcblxyXG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
